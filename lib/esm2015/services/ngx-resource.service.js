import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
let NgxResourceService = class NgxResourceService {
    constructor(httpClient) {
        this._beforeRequest = new Observable((observer) => {
            observer.complete();
        });
        this._httpClient = httpClient;
    }
    list(headers, params) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.get(this._apiEndpoint, {
            headers: headers,
            params: params,
            observe: 'response'
        })));
    }
    get(id, headers, params) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.get(this._apiEndpoint + '/' + id, {
            headers: headers,
            params: params,
            observe: 'response'
        })));
    }
    add(entity, headers) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.post(this._apiEndpoint, entity, {
            headers: headers,
            observe: 'response'
        })));
    }
    update(id, entity, headers) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.put(this._apiEndpoint + '/' + id, entity, {
            headers: headers,
            observe: 'response'
        })));
    }
    delete(id, headers) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.delete(this._apiEndpoint + '/' + id, {
            headers: headers,
            observe: 'response'
        })));
    }
};
NgxResourceService.ctorParameters = () => [
    { type: HttpClient }
];
NgxResourceService = __decorate([
    Injectable()
], NgxResourceService);
export { NgxResourceService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc291cmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzb3VyY2UvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9uZ3gtcmVzb3VyY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekYsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUMsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUF5RjdCLFlBQVksVUFBc0I7UUFJeEIsbUJBQWMsR0FBcUIsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUF3QixFQUFRLEVBQUU7WUFDM0YsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBTEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7SUFDaEMsQ0FBQztJQXZGTSxJQUFJLENBQ1QsT0FFQyxFQUNELE1BRUM7UUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUM3QixRQUFRLENBQ04sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUMvQyxPQUFPLEVBQUUsT0FBTztZQUNoQixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxVQUFVO1NBQ3BCLENBQUMsQ0FDSCxDQUNGLENBQUM7SUFDSixDQUFDO0lBRU0sR0FBRyxDQUNSLEVBQUssRUFDTCxPQUVDLEVBQ0QsTUFFRDtRQUVDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdCLFFBQVEsQ0FDTixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUU7WUFDMUQsT0FBTyxFQUFFLE9BQU87WUFDaEIsTUFBTSxFQUFFLE1BQU07WUFDZCxPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVNLEdBQUcsQ0FDUixNQUFTLEVBQ1QsT0FFQztRQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdCLFFBQVEsQ0FDTixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBSSxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRTtZQUN4RCxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FDWCxFQUFLLEVBQ0wsTUFBUyxFQUNULE9BRUM7UUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUM3QixRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRTtZQUMzRSxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQUMsQ0FDSixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FDWCxFQUFLLEVBQ0wsT0FFQztRQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdCLFFBQVEsQ0FDTixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUU7WUFDaEUsT0FBTyxFQUFFLE9BQU87WUFDaEIsT0FBTyxFQUFFLFVBQVU7U0FDcEIsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FRRixDQUFBOztZQVB5QixVQUFVOztBQXpGdkIsa0JBQWtCO0lBRDlCLFVBQVUsRUFBRTtHQUNBLGtCQUFrQixDQWdHOUI7U0FoR1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcywgSHR0cEhlYWRlcnMsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neFJlc291cmNlU2VydmljZTxULCBSID0gVFtdLCBJID0gbnVtYmVyPiB7XG4gIHByb3RlY3RlZCBfYXBpRW5kcG9pbnQ6IHN0cmluZztcbiAgcHJvdGVjdGVkIF9odHRwQ2xpZW50OiBIdHRwQ2xpZW50O1xuXG4gIHB1YmxpYyBsaXN0KFxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IHtcbiAgICAgIFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH0sXG4gICAgcGFyYW1zPzogSHR0cFBhcmFtcyB8IHtcbiAgICAgICAgW3BhcmFtOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9XG4gICk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFI+PiB7XG4gICAgcmV0dXJuIHRoaXMuX2JlZm9yZVJlcXVlc3QucGlwZShcbiAgICAgIG1lcmdlTWFwKFxuICAgICAgICAoKSA9PiB0aGlzLl9odHRwQ2xpZW50LmdldDxSPih0aGlzLl9hcGlFbmRwb2ludCwge1xuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJ1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0KFxuICAgIGlkOiBJLFxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IHtcbiAgICAgIFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH0sXG4gICAgcGFyYW1zPzogSHR0cFBhcmFtcyB8IHtcbiAgICAgIFtwYXJhbTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gIH1cbiAgKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5fYmVmb3JlUmVxdWVzdC5waXBlKFxuICAgICAgbWVyZ2VNYXAoXG4gICAgICAgICgpID0+IHRoaXMuX2h0dHBDbGllbnQuZ2V0PFQ+KHRoaXMuX2FwaUVuZHBvaW50ICsgJy8nICsgaWQsIHtcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFkZChcbiAgICBlbnRpdHk6IFQsXG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzIHwge1xuICAgICAgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfVxuICApOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxUPj4ge1xuICAgIHJldHVybiB0aGlzLl9iZWZvcmVSZXF1ZXN0LnBpcGUoXG4gICAgICBtZXJnZU1hcChcbiAgICAgICAgKCkgPT4gdGhpcy5faHR0cENsaWVudC5wb3N0PFQ+KHRoaXMuX2FwaUVuZHBvaW50LCBlbnRpdHksIHtcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZShcbiAgICBpZDogSSxcbiAgICBlbnRpdHk6IFQsXG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzIHwge1xuICAgICAgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfVxuICApOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxUPj4ge1xuICAgIHJldHVybiB0aGlzLl9iZWZvcmVSZXF1ZXN0LnBpcGUoXG4gICAgICBtZXJnZU1hcCgoKSA9PiB0aGlzLl9odHRwQ2xpZW50LnB1dDxUPih0aGlzLl9hcGlFbmRwb2ludCArICcvJyArIGlkLCBlbnRpdHksIHtcbiAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJ1xuICAgICAgfSkpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGUoXG4gICAgaWQ6IEksXG4gICAgaGVhZGVycz86IEh0dHBIZWFkZXJzIHwge1xuICAgICAgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfVxuICApOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTx2b2lkPj4ge1xuICAgIHJldHVybiB0aGlzLl9iZWZvcmVSZXF1ZXN0LnBpcGUoXG4gICAgICBtZXJnZU1hcChcbiAgICAgICAgKCkgPT4gdGhpcy5faHR0cENsaWVudC5kZWxldGU8dm9pZD4odGhpcy5fYXBpRW5kcG9pbnQgKyAnLycgKyBpZCwge1xuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJ1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgY29uc3RydWN0b3IoaHR0cENsaWVudDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuX2h0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xuICB9XG5cbiAgcHJvdGVjdGVkIF9iZWZvcmVSZXF1ZXN0OiBPYnNlcnZhYmxlPHZvaWQ+ID0gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyOiBPYnNlcnZlcjx2b2lkPik6IHZvaWQgPT4ge1xuICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgfSk7XG59Il19