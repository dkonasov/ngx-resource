import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
let NgxResourceService = class NgxResourceService {
    constructor(httpClient) {
        this._beforeRequest = new Observable((observer) => {
            observer.complete();
        });
        this._httpClient = httpClient;
    }
    list(headers, params) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.get(this._apiEndpoint, {
            headers: headers,
            params: params,
            observe: 'response'
        })));
    }
    get(id, headers, params) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.get(this._apiEndpoint + '/' + id, {
            headers: headers,
            params: params,
            observe: 'response'
        })));
    }
    add(entity, headers) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.post(this._apiEndpoint, entity, {
            headers: headers,
            observe: 'response'
        })));
    }
    update(id, entity, headers) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.put(this._apiEndpoint + '/' + id, entity, {
            headers: headers,
            observe: 'response'
        })));
    }
    delete(id, headers) {
        return this._beforeRequest.pipe(mergeMap(() => this._httpClient.delete(this._apiEndpoint + '/' + id, {
            headers: headers,
            observe: 'response'
        })));
    }
};
NgxResourceService = __decorate([
    Injectable()
], NgxResourceService);
export { NgxResourceService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc291cmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvbmd4LXJlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHMUMsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUF5RjdCLFlBQVksVUFBc0I7UUFJeEIsbUJBQWMsR0FBcUIsSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUF3QixFQUFRLEVBQUU7WUFDM0YsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBTEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7SUFDaEMsQ0FBQztJQXZGTSxJQUFJLENBQ1QsT0FFQyxFQUNELE1BRUM7UUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUM3QixRQUFRLENBQ04sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUMvQyxPQUFPLEVBQUUsT0FBTztZQUNoQixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxVQUFVO1NBQ3BCLENBQUMsQ0FDSCxDQUNGLENBQUM7SUFDSixDQUFDO0lBRU0sR0FBRyxDQUNSLEVBQUssRUFDTCxPQUVDLEVBQ0QsTUFFRDtRQUVDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdCLFFBQVEsQ0FDTixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUU7WUFDMUQsT0FBTyxFQUFFLE9BQU87WUFDaEIsTUFBTSxFQUFFLE1BQU07WUFDZCxPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVNLEdBQUcsQ0FDUixNQUFTLEVBQ1QsT0FFQztRQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdCLFFBQVEsQ0FDTixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBSSxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRTtZQUN4RCxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FDWCxFQUFLLEVBQ0wsTUFBUyxFQUNULE9BRUM7UUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUM3QixRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRTtZQUMzRSxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsVUFBVTtTQUNwQixDQUFDLENBQUMsQ0FDSixDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sQ0FDWCxFQUFLLEVBQ0wsT0FFQztRQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzdCLFFBQVEsQ0FDTixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUU7WUFDaEUsT0FBTyxFQUFFLE9BQU87WUFDaEIsT0FBTyxFQUFFLFVBQVU7U0FDcEIsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FRRixDQUFBO0FBaEdZLGtCQUFrQjtJQUQ5QixVQUFVLEVBQUU7R0FDQSxrQkFBa0IsQ0FnRzlCO1NBaEdZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMsIEh0dHBIZWFkZXJzLCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hSZXNvdXJjZVNlcnZpY2U8VCwgUiA9IFRbXSwgSSA9IG51bWJlcj4ge1xuICBwcm90ZWN0ZWQgX2FwaUVuZHBvaW50OiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfaHR0cENsaWVudDogSHR0cENsaWVudDtcblxuICBwdWJsaWMgbGlzdChcbiAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnMgfCB7XG4gICAgICBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9LFxuICAgIHBhcmFtcz86IEh0dHBQYXJhbXMgfCB7XG4gICAgICAgIFtwYXJhbTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfVxuICApOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxSPj4ge1xuICAgIHJldHVybiB0aGlzLl9iZWZvcmVSZXF1ZXN0LnBpcGUoXG4gICAgICBtZXJnZU1hcChcbiAgICAgICAgKCkgPT4gdGhpcy5faHR0cENsaWVudC5nZXQ8Uj4odGhpcy5fYXBpRW5kcG9pbnQsIHtcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldChcbiAgICBpZDogSSxcbiAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnMgfCB7XG4gICAgICBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICB9LFxuICAgIHBhcmFtcz86IEh0dHBQYXJhbXMgfCB7XG4gICAgICBbcGFyYW06IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICB9XG4gICk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMuX2JlZm9yZVJlcXVlc3QucGlwZShcbiAgICAgIG1lcmdlTWFwKFxuICAgICAgICAoKSA9PiB0aGlzLl9odHRwQ2xpZW50LmdldDxUPih0aGlzLl9hcGlFbmRwb2ludCArICcvJyArIGlkLCB7XG4gICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGQoXG4gICAgZW50aXR5OiBULFxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IHtcbiAgICAgIFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH1cbiAgKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5fYmVmb3JlUmVxdWVzdC5waXBlKFxuICAgICAgbWVyZ2VNYXAoXG4gICAgICAgICgpID0+IHRoaXMuX2h0dHBDbGllbnQucG9zdDxUPih0aGlzLl9hcGlFbmRwb2ludCwgZW50aXR5LCB7XG4gICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICBvYnNlcnZlOiAncmVzcG9uc2UnXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUoXG4gICAgaWQ6IEksXG4gICAgZW50aXR5OiBULFxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IHtcbiAgICAgIFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH1cbiAgKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5fYmVmb3JlUmVxdWVzdC5waXBlKFxuICAgICAgbWVyZ2VNYXAoKCkgPT4gdGhpcy5faHR0cENsaWVudC5wdXQ8VD4odGhpcy5fYXBpRW5kcG9pbnQgKyAnLycgKyBpZCwgZW50aXR5LCB7XG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgIH0pKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlKFxuICAgIGlkOiBJLFxuICAgIGhlYWRlcnM/OiBIdHRwSGVhZGVycyB8IHtcbiAgICAgIFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIH1cbiAgKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8dm9pZD4+IHtcbiAgICByZXR1cm4gdGhpcy5fYmVmb3JlUmVxdWVzdC5waXBlKFxuICAgICAgbWVyZ2VNYXAoXG4gICAgICAgICgpID0+IHRoaXMuX2h0dHBDbGllbnQuZGVsZXRlPHZvaWQ+KHRoaXMuX2FwaUVuZHBvaW50ICsgJy8nICsgaWQsIHtcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGNvbnN0cnVjdG9yKGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICB0aGlzLl9odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcbiAgfVxuXG4gIHByb3RlY3RlZCBfYmVmb3JlUmVxdWVzdDogT2JzZXJ2YWJsZTx2b2lkPiA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8dm9pZD4pOiB2b2lkID0+IHtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gIH0pO1xufSJdfQ==